public class BigInt {
    public int ndigits; // size of the array
    // public for test purposes
    public char data[]; // array of digits

    public BigInt(int _ndigits) {
        ndigits = _ndigits;
        data = new char[ndigits];
    }

    public BigInt(char[] _data) {
        ndigits = _data.length; // LOL
        data = _data;
    }

    public BigInt(String s) {
        ndigits = s.length();
        data = new char[ndigits];

        for (int i = 0; i < ndigits; i++) {
            data[i] = (char) (s.charAt(ndigits - 1 - i) - '0');
        }
    }

    public char get(int i) {
        if (i >= ndigits) {
            return 0;
        } // return zero for out-of-bounds
        return data[i];
    }

    public BigInt Add(BigInt y) {
        int newsize = Math.max(ndigits, y.ndigits) + 1;
        BigInt result = new BigInt(newsize);
        int carry = 0;
        for (int i = 0; i < newsize; ++i) {
            int a = i >= ndigits ? 0 : data[i];
            int b = i >= y.ndigits ? 0 : y.data[i];
            int c = a + b + carry;
            carry = 0;

            while (c >= 10) {
                c -= 10;
                carry++;
            }

            result.data[i] = (char) c;
        }

        return result.TrimTrailing();
    }

    public BigInt Sub(BigInt y) {
        int newsize = Math.max(ndigits, y.ndigits) + 1;
        BigInt result = new BigInt(newsize);
        int carry = 0;
        for (int i = 0; i < newsize; ++i) {
            int a = i >= ndigits ? 0 : data[i];
            int b = i >= y.ndigits ? 0 : y.data[i];
            int c = a - b - carry;
            carry = 0;

            while (c < 0) {
                c = 10 + c;
                carry++;
            }

            result.data[i] = (char) c;
        }

        return result.TrimTrailing();
    }

    public BigInt Shift(int n) {
        int newsize = ndigits + n;
        BigInt result = new BigInt(newsize);
        for (int i = 0; i < newsize; ++i) {
            result.data[i] = i < n ? 0 : data[i - n];
        }
        return result.TrimTrailing();
    }

    public BigInt MulByDigit(char c) {
        BigInt result = new BigInt(0);
        for (int i = 0; i < c; ++i) {
            result = result.Add(this);
        }
        return result.TrimTrailing();
    }

    public BigInt Mul(BigInt y) {
        BigInt result = new BigInt(1);
        for (int i = 0; i < y.ndigits; ++i) {
            result = result.Add(Shift(i).MulByDigit(y.data[i]));
        }
        return result.TrimTrailing();
    }

    public BigInt Div(BigInt y) {
        BigInt result = new BigInt(0);
        BigInt count = new BigInt(1);

        while (GreaterThan(count)) {
            result = result.Add(new BigInt("1"));
            count = count.Add(y);
        }

        return result.TrimTrailing();
    }

    private boolean GreaterThan(BigInt y) {
        int yv = y.FirstValid();
        int v = FirstValid();

        if (yv > v)
            return false;

        if (v > yv)
            return true;

        for (int i = v; i >= 0; --i) {
            if (y.data[i] == data[i])
                continue;

            return y.data[i] < data[i];
        }

        return false;
    }

    private int FirstValid() {
        for (int i = ndigits - 1; i >= 0; --i) {
            if (data[i] > 0)
                return i;
        }

        return 0;
    }

    public BigInt Rem(BigInt y) {
        BigInt count = new BigInt(1);

        while (GreaterThan(count)) {
            BigInt next = count.Add(y);
            if (!GreaterThan(next))
                return Sub(count).TrimTrailing();

            count = next;
        }

        return new BigInt(1);
    }

    public BigInt TrimTrailing()
    {
        for (int i = ndigits - 1; i >= 0; --i) {
            if (data[i] != 0) {
                char[] res = new char[i + 1];
                for (int b = 0; b <= i; ++b) {
                    res[b] = data[b];
                }
                return new BigInt(res);
            }
        }
        return this;
    }
}


// Q3 The kth Fibonacci number is defined as: 0 (if k is 0); 1 (if k is 1); the sum of the previous two Fibonacci numbers (if k is larger than 1). If n is your five-digit moodle ID, what is the sum of the digits (in base 10) of the nth Fibonacci number? The answer for a moodle ID of 11342 is 10511.

// Q4 The k factorial is defined as: 1 (if k is 0); k times (k-1)factorial (otherwise). If n is your five-digit moodle ID, how many trailing zeros are there in the base 10 representation of n factorial? The answer for a moodle ID of 11342 is 2832.

// q3 50801 q4 13456
/*
public static BigInteger getFib(int n) {
        BigInteger a = new BigInteger("1");
        BigInteger b = new BigInteger("1");

        if (n < 2) {
            return a;
        }
        BigInteger c = null;
        while (n-- >= 2) {
            c = a.add(b);
            a = b;
            b = c;
        }
        return c;
    }

    static int findTrailingZeros(int n)
    {
        // Initialize result
        int count = 0;

        // Keep dividing n by powers of 5 and update count
        for (int i=5; n/i>=1; i *= 5)
            count += n/i;

        return count;
    }


    then

    System.out.println(getFib(53836)); -->

    String a
        int sum = 0;
        for (char c : a.replaceAll("\\D", "").toCharArray()) {
            int digit = c - '0';
            sum += digit;
        }
        System.out.println(sum);

        System.out.println(findTrailingZeros(53837));
 */